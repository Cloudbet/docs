syntax = "proto3";

package cloudbet;
option go_package = "cloudbet";
import "cloudbet/response.proto";

// Public Bet Request
//
// swagger:model
message PublicBetRequest {
    // Reference ID, randomly generated request id to allow idempotent calls. Required to be in the UUID format.
    //
    // required: true
    // example: 0e81877b-4b10-4587-a4cf-89f4336ac843
    string reference_id = 1;
    // Stake in number
    //
    // required: true
    string stake = 2;
    // Price as number
    //
    // required: true
    string price = 3;
    // Event ID
    //
    // required: true
    string event_id = 4;
    // Market URL, is compiled from the feed data as `marketKey/outcome?params`, if no params (empty string) are present omit the query string and format as `marketKey/outcome`
    //
    // required: true
    // example: soccer.total_goals/over?total=3
    string market_url = 5;
    // Side, default to be BACK
    //
    // required: false
    Side side = 6;
    // Currency for given stake
    //
    // required: true
    string currency = 7;

    // Accept better price, default to be no price change
    //
    // required: false
    AcceptPriceChange accept_price_change = 12;
}

// Public Bet Response
//
// swagger:model
message PublicBetResponse {
    // Reference ID
    //
    // required: true
    string reference_id = 1;
    // Price as number
    //
    // required: true
    string price = 3;
    // Event ID
    //
    // required: true
    string event_id = 4;
    // Market URL
    //
    // required: true
    // example: soccer.total_goals/over?total=3
    string market_url = 5;
    // Side, default to be BACK
    //
    // required: false
    Side side = 6;
    // Currency for given stake
    //
    // required: true
    string currency = 7;
    // Stake in number
    //
    // required: true
    string stake = 8;
    // Bet status
    //
    // required: true
    cloudbet.Status status = 9;
    // Return Amount as number, pending bets will have 0
    //
    // required: true
    string return_amount = 12;
    // Event name in english
    //
    // required: true
    string event_name = 13;
    // Sports Key
    //
    // required: true
    string sports_key = 14;
    // Competition ID
    //
    // required: true
    int64 competition_id = 15;
    // Category Key
    //
    // required: true
    string category_key = 16;
    // Error Details, indicates some descriptive reasoning on bet rejection, for `MALFORMED_REQUEST`
    //
    // required: false
    string error = 17;
}

// Public Bet History Response
// swagger:model
message PublicBetHistoryResponse {
    // Bets
    //
    // required: true
    repeated PublicBetResponse bets = 1;
    // Total number of bets used for pagination
    //
    // required: true
    int64 total_bets = 2;
}

// Side of a selection signals whether a selection
// is available for back or lay side betting
enum Side {
    // selection offers back side betting
    BACK = 0;
    // selection offers lay side betting
    LAY = 1;
}

enum AcceptPriceChange {
    // not accepting any price change
    NONE = 0;
    // price accepted could be lower than input
    ALL = 1;
    // accept price change go higher or no change
    BETTER = 2;
}
