```php
<?php
require_once __DIR__ . '/authentication.php';

// Competition
// Endpoint: /api/v1/sports/competition/<competitionId>
// Optional query params:
//  * since - competition will only contain events with start date greater or equal to provided value (UNIX timestamp)

$competition = new \Sportsbook\CompetitionTree();

if (!isset($competitionId)) {
	$competitionId = 196;
}

try {
	$competition->parseFromString(getApiResponse('competition/' . $competitionId));
} catch (Exception $e) {
	die('Unable to get competition: ' . $e->getMessage() . PHP_EOL);
}

echo 'Competition "' . $competition->getName() . '" with ' . count($competition->getEvents()) . ' events' . PHP_EOL;
$renderer = new TableRenderer(array(
	'ID',
	'Name',
));
foreach ($competition->getEvents() as $event) {
	$renderer->row(array(
		$event->getId(),
		implode(' vs ', array_map(function (\Sportsbook\Competitor $competitor) {
			return $competitor->getName();
		}, $event->getCompetitors())),
	));
}
$renderer->end();

// Obtaining timestamp of a random event to use it as a `since` param
$since = $competition->getEventsAt(floor(count($competition->getEvents()) / 3 * 2))->getTimestamp();

$updatedCompetition = new \Sportsbook\CompetitionTree();

try {
	$updatedCompetition->parseFromString(getApiResponse('competition/' . $competitionId . '?' . http_build_query(array(
		'since' => $since,
	))));
} catch (Exception $e) {
	die('Unable to get competition: ' . $e->getMessage() . PHP_EOL);
}

echo PHP_EOL . 'Competition "' . $updatedCompetition->getName() . '" with ' . count($updatedCompetition->getEvents()) . ' events updated since ' . date('d.m.Y H:i:s', $since) . PHP_EOL;
$renderer = new TableRenderer(array(
	'ID',
	'Name',
));
foreach ($updatedCompetition->getEvents() as $event) {
	$renderer->row(array(
		$event->getId(),
		implode(' vs ', array_map(function (\Sportsbook\Competitor $competitor) {
			return $competitor->getName();
		}, $event->getCompetitors())),
	));
}
$renderer->end();

```
